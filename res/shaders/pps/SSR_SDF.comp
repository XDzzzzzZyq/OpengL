#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform image2D U_combine;
layout(rgba16f, binding = 2) uniform image2D U_normal;
layout(rgba16f, binding = 3) uniform image2D U_mrse;
layout(rgba8  , binding = 4) uniform image2D U_albedo;
layout(rgba8  , binding = 5) uniform image2D U_alpha;
layout(rgba16f, binding = 6) uniform image2D U_cache;

uniform sampler2D U_pos;
uniform sampler2D U_dir_diff;
uniform sampler2D U_dir_spec;
uniform sampler2D U_ind_diff;
uniform sampler2D U_ind_spec;
uniform sampler2D U_emission;

uniform vec3 cam_pos;
uniform mat4 cam_trans;

uniform float noise;

uniform bool use_incr_aver;
uniform float std_ud_rate;

const float stride = 0.1f;
const float range = 0.2f;
const int max_step = 64;
const int max_bs_step = 8;
const float bs_range = 0.01f;

const vec3 Scale = vec3(.8, .8, .8);
const float K = 19.19;

layout(std430, binding = 6) readonly buffer SDF {
	vec3 SDF_pos;
	vec3 SDF_scale;
	vec3 SDF_size;
	int SDF_subdiv;
	uint SDF_data[];
};

// This shader partially refered to the Repo: https://github.com/GPUOpen-Effects/TressFX/tree/master

float LinearInterpolate(float a, float b, float t)
{
    return a * (1.0f - t) + b * t;
}


//    x = BilinearInterpolate(a, b, c, d, p, q)
//      = LinearInterpolate(LinearInterpolate(a, b, p), LinearInterpolate(c, d, p), q)
float BilinearInterpolate(float a, float b, float c, float d, float p, float q)
{
    return LinearInterpolate( LinearInterpolate(a, b, p), LinearInterpolate(c, d, p), q );
}

//		x = TrilinearInterpolate(a, b, c, d, e, f, g, h, p, q, r)
//		  = LinearInterpolate(BilinearInterpolate(a, b, c, d, p, q), BilinearInterpolate(e, f, g, h, p, q), r)
float TrilinearInterpolate(float a, float b, float c, float d, float e, float f, float g, float h, float p, float q, float r)
{
    return LinearInterpolate(BilinearInterpolate(a, b, c, d, p, q), BilinearInterpolate(e, f, g, h, p, q), r);
}

uint FloatFlip3(float fl)
{
    uint f = floatBitsToUint(fl);
    return (f << 1) | (f >> 31);		//Rotate sign bit to least significant
}
float IFloatFlip3(uint f2)
{
    uint u = (f2 >> 1) | (f2 << 31);
	return uintBitsToFloat(u);
}

float ReadSDFAt(ivec3 index){
	int index_linear = int(index.x + index.y * SDF_size.x + index.z * SDF_size.x * SDF_size.y);
	return IFloatFlip3(SDF_data[index_linear]);
}

float ReadSDF(vec3 pos){
	vec3 transf = (pos - SDF_pos) / SDF_scale;  // normalize
	vec3 over = transf - clamp(transf, -1, 1);  // over the field
	transf = clamp(transf, -1, 1) + 1;			// [0, 2]
	transf *= 0.5;								// [0, 1]
	transf *= (SDF_size - 1);					// [(0,0,0), (W-1,D-1,H-1)]


	float distance_000 = ReadSDFAt(ivec3(transf) + ivec3(0,0,0));
	float distance_001 = ReadSDFAt(ivec3(transf) + ivec3(0,0,1));
	float distance_010 = ReadSDFAt(ivec3(transf) + ivec3(0,1,0));
	float distance_011 = ReadSDFAt(ivec3(transf) + ivec3(0,1,1));
	float distance_100 = ReadSDFAt(ivec3(transf) + ivec3(1,0,0));
	float distance_101 = ReadSDFAt(ivec3(transf) + ivec3(1,0,1));
	float distance_110 = ReadSDFAt(ivec3(transf) + ivec3(1,1,0));
	float distance_111 = ReadSDFAt(ivec3(transf) + ivec3(1,1,1));

	vec3 interp = fract(transf);

	return TrilinearInterpolate(distance_000, distance_100, distance_010, distance_110,
                                distance_001, distance_101, distance_011, distance_111,
                                interp.x, interp.y, interp.z) + length(over);
}

bool IsOutScreen(vec2 uv){
	bool x = uv.x<0 || uv.x>1;
	bool y = uv.y<0 || uv.y>1;
	return x || y;
}

vec2 pos2uv(vec3 pos){
	vec4 screen_pos = cam_trans * vec4(pos, 1);
	vec2 frag_pos = screen_pos.xy / screen_pos.w / 2 + 0.5;

	return frag_pos;
}

vec4 DepthSample(vec3 ray_pos){

	vec2 frag_pos = pos2uv(ray_pos);

	if(IsOutScreen(frag_pos))
		return vec4(0);

	float screen_depth = texture(U_pos, frag_pos).w;
	float sample_depth = distance(ray_pos, cam_pos);

	return vec4(frag_pos, sample_depth, screen_depth);
}

vec2 BindarySearch(vec3 begin, vec3 end){
	
	vec3 c_begin = DepthSample(begin).xyz;
	vec3 c_end = DepthSample(end).xyz;

	float cur = 0.5;
	float move = 0.5;
	vec2 result;

	for(int i = 0; i < max_bs_step; i++){
		
		vec2 loc = mix(c_begin.xy, c_end.xy, cur);

		result = loc;
		float cur_depth = mix(c_begin.z, c_end.z, cur);
		float min_depth = texture(U_pos, loc).w;
		float dDepth = cur_depth - min_depth;
		move *= 0.5;

		if(dDepth > bs_range){
			// marching too much
			cur -= move;
		}else if(dDepth < 0){
			// keep marching
			cur += move;
		}else{
			break;
		}
	}

	return result;
}

vec2 FastRayMarching(vec3 dir, inout vec3 ray_pos){
	
	vec2 result = vec2(-1);
	vec3 ray_pos_b = ray_pos;

	ray_pos += stride * dir;
	vec4 pre_depth_test = DepthSample(ray_pos);
	if(pre_depth_test.z - pre_depth_test.w < range && pre_depth_test.z - pre_depth_test.w>0)
		return BindarySearch(ray_pos_b, ray_pos);

	for(int i = 0; i < max_step; i++){
		ray_pos_b = ray_pos;
		float dist = ReadSDF(ray_pos);
		ray_pos += abs(dist) * dir;

		if(dist > 10)
			return vec2(-1);

		if(dist < 0.02){
			vec4 test = DepthSample(ray_pos);
			return test.z - test.w < 0.1 ? test.xy : vec2(-2);
		}

	}

	return vec2(-3);
}

vec3 fresnelSG(float Cos, vec3 F0){
	return mix(vec3(exp2((-5.55437*Cos-6.98314)*Cos)), vec3(1.0), F0);
}

vec3 hash(vec3 a)
{
    a = fract(a * Scale);
    a += dot(a, a.yxz + K);
    return fract((a.xxy + a.yxx)*a.zyx)*2-1;
}

vec3 sample_combine(vec2 uv){
	vec3 Dir_Diff = texture(U_dir_diff, uv).rgb;
	vec3 Dir_Spec = texture(U_dir_spec, uv).rgb;
	vec3 Ind_Diff = texture(U_ind_diff, uv).rgb;
	vec3 Ind_Spec = texture(U_ind_spec, uv).rgb;
	vec3 Emission = texture(U_emission, uv).rgb;

	return Dir_Diff + Dir_Spec + Ind_Diff + Ind_Spec + Emission;
} 

vec3 ParseRayHitDebug(vec2 result, vec3 Ind_Diff, vec3 Ind_Spec, vec3 Fresnel){
	if(result.x >= 0)
		return vec3(1,1,1);
	else if(result.x >= -1)
		//return Ind_Diff+Ind_Spec;
		return vec3(1,0,0);
	else if(result.x >= -2)
		return vec3(0,1,0);
	else if(result.x >= -3)
		return vec3(0,0,1);
}

vec3 ParseRayHit(vec2 result, vec3 Ind_Diff, vec3 Ind_Spec, vec3 Fresnel){
	return result.x < 0 ? Ind_Diff+Ind_Spec : sample_combine(result) * Fresnel;
}

void main(){
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv_f = (vec2(uv)+0.5)/imageSize(U_combine);
	
	vec3 Direct = imageLoad(U_combine, uv).rgb;

	float Alpha = imageLoad(U_alpha, uv).r;
	if(Alpha < 0.5){
		imageStore(U_combine, uv, vec4(Direct, 1));
		return;
	}

	vec3 Dir_Diff = texture(U_dir_diff, uv_f).rgb;
	vec3 Dir_Spec = texture(U_dir_spec, uv_f).rgb;
	vec3 Ind_Diff = texture(U_ind_diff, uv_f).rgb;
	vec3 Ind_Spec = texture(U_ind_spec, uv_f).rgb;
	vec3 Emission = texture(U_emission, uv_f).rgb;

	vec4 Pos_Depth = texture(U_pos, uv_f);
	vec4 Normal_AO = imageLoad(U_normal, uv);

	vec3 Pos = Pos_Depth.xyz;
	vec3 Normal = Normal_AO.xyz;

	
	vec3 Albedo = imageLoad(U_albedo, uv).rgb;

	vec4 MRSE = imageLoad(U_mrse, uv).rgba;
	float Metalness = clamp(MRSE.r, 0.001, 0.999);
	float Roughness = clamp(MRSE.g, 0.001, 0.999);
	float Specular = MRSE.b;

	vec3 jitt = mix(vec3(0.0), clamp(hash(hash(Pos+noise)), -1, 1), Roughness);
	vec3 reflect_dir = mix(reflect(normalize(Pos - cam_pos), Normal), Normal, Roughness);
	reflect_dir = normalize(reflect_dir) + jitt;
	reflect_dir = normalize(reflect_dir);
	vec3 ray_pos = Pos;

	vec3 CamRay = normalize(Pos - cam_pos);
	float NdotV = max(dot(Normal, -CamRay), 0);
	float NdotL = max(dot(Normal, reflect_dir), 0);

	vec3 F0 = mix(vec3(0.1), Albedo, Metalness);
	vec3 Fresnel = fresnelSG(NdotV, F0);

	vec2 MarchResult = FastRayMarching(reflect_dir, ray_pos);

	vec3 Indirect = ParseRayHit(MarchResult, Ind_Diff, Ind_Spec, Fresnel);
	vec3 Indirect_b = imageLoad(U_cache, uv).gba;

	float update_rate = use_incr_aver ? smoothstep(0.95, 1.0, 1 - Roughness)*0.97 + 0.02 : std_ud_rate; // R [0 - 1] -> rate [0.99 - 0.02]
	Indirect = max(Indirect_b + update_rate * (Indirect - Indirect_b), 0);

	vec3 Output = Emission + Dir_Diff + Dir_Spec + Indirect;

	memoryBarrierBuffer();
	imageStore(U_cache  , uv, vec4(Normal_AO.a, Indirect));
	imageStore(U_combine, uv, vec4(Output, 1));

	if(!use_incr_aver)
		return;
	// filtering

	float RoughL = imageLoad(U_mrse, uv+ivec2(-1, 0)).g;
	float RoughR = imageLoad(U_mrse, uv+ivec2( 1, 0)).g;
	float RoughU = imageLoad(U_mrse, uv+ivec2( 0, 1)).g;
	float RoughD = imageLoad(U_mrse, uv+ivec2( 0,-1)).g;

	vec4 CacheL = imageLoad(U_cache, uv+ivec2(-1, 0)).rgba;
	vec4 CacheR = imageLoad(U_cache, uv+ivec2( 1, 0)).rgba;
	vec4 CacheU = imageLoad(U_cache, uv+ivec2( 0, 1)).rgba;
	vec4 CacheD = imageLoad(U_cache, uv+ivec2( 0,-1)).rgba;

	CacheL.gba = mix(CacheL.gba, Indirect, RoughL*Roughness/2);
	CacheR.gba = mix(CacheR.gba, Indirect, RoughR*Roughness/2);
	CacheU.gba = mix(CacheU.gba, Indirect, RoughU*Roughness/2);
	CacheD.gba = mix(CacheD.gba, Indirect, RoughD*Roughness/2);

	imageStore(U_cache, uv+ivec2(-1, 0), CacheL);
	imageStore(U_cache, uv+ivec2( 1, 0), CacheR);
	imageStore(U_cache, uv+ivec2( 0, 1), CacheU);
	imageStore(U_cache, uv+ivec2( 0,-1), CacheD);
}