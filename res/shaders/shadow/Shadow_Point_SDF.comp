#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba16f, binding = 2) uniform image2D U_normal;
layout(rgba16f, binding = 3) uniform image2D U_pos;
layout(r16f,    binding = 4) uniform image2D U_Lighting;
layout(rgba8  , binding = 5) uniform image2D U_alpha;

uniform vec3 light_pos;
uniform vec3 U_offset[16];
uniform int frame;
uniform float update_rate;
uniform float offset;
uniform float radius;

layout(std430, binding = 6) readonly buffer SDF {
	vec3 SDF_pos;
	vec3 SDF_scale;
	vec3 SDF_size;
	int SDF_subdiv;
	uint SDF_data[];
};

// This shader partially refered to the Repo: https://github.com/GPUOpen-Effects/TressFX/tree/master

float LinearInterpolate(float a, float b, float t)
{
    return a * (1.0f - t) + b * t;
}


//    x = BilinearInterpolate(a, b, c, d, p, q)
//      = LinearInterpolate(LinearInterpolate(a, b, p), LinearInterpolate(c, d, p), q)
float BilinearInterpolate(float a, float b, float c, float d, float p, float q)
{
    return LinearInterpolate( LinearInterpolate(a, b, p), LinearInterpolate(c, d, p), q );
}

//		x = TrilinearInterpolate(a, b, c, d, e, f, g, h, p, q, r)
//		  = LinearInterpolate(BilinearInterpolate(a, b, c, d, p, q), BilinearInterpolate(e, f, g, h, p, q), r)
float TrilinearInterpolate(float a, float b, float c, float d, float e, float f, float g, float h, float p, float q, float r)
{
    return LinearInterpolate(BilinearInterpolate(a, b, c, d, p, q), BilinearInterpolate(e, f, g, h, p, q), r);
}

uint FloatFlip3(float fl)
{
    uint f = floatBitsToUint(fl);
    return (f << 1) | (f >> 31);		//Rotate sign bit to least significant
}
float IFloatFlip3(uint f2)
{
    uint u = (f2 >> 1) | (f2 << 31);
	return uintBitsToFloat(u);
}

float ReadSDFAt(ivec3 index){
	int index_linear = int(index.x + index.y * SDF_size.x + index.z * SDF_size.x * SDF_size.y);
	return IFloatFlip3(SDF_data[index_linear]);
}

float ReadSDF(vec3 pos){
	vec3 transf = (pos - SDF_pos) / SDF_scale;  // normalize
	vec3 over = transf - clamp(transf, -1, 1);  // over the field
	transf = clamp(transf, -1, 1) + 1;			// [0, 2]
	transf *= 0.5;								// [0, 1]
	transf *= (SDF_size - 1);					// [(0,0,0), (W-1,D-1,H-1)]


	float distance_000 = ReadSDFAt(ivec3(transf) + ivec3(0,0,0));
	float distance_001 = ReadSDFAt(ivec3(transf) + ivec3(0,0,1));
	float distance_010 = ReadSDFAt(ivec3(transf) + ivec3(0,1,0));
	float distance_011 = ReadSDFAt(ivec3(transf) + ivec3(0,1,1));
	float distance_100 = ReadSDFAt(ivec3(transf) + ivec3(1,0,0));
	float distance_101 = ReadSDFAt(ivec3(transf) + ivec3(1,0,1));
	float distance_110 = ReadSDFAt(ivec3(transf) + ivec3(1,1,0));
	float distance_111 = ReadSDFAt(ivec3(transf) + ivec3(1,1,1));

	vec3 interp = fract(transf);

	return TrilinearInterpolate(distance_000, distance_100, distance_010, distance_110,
                                distance_001, distance_101, distance_011, distance_111,
                                interp.x, interp.y, interp.z) + length(over);
}

float shadow_at(vec3 pos, vec3 norm){
	float shadow = 1.0f;
	vec3 L = pos - light_pos;  // light -> position
	float len = length(L);
	vec3 dir = normalize(L);

	float bias = 0.01;
	float sdf_b = 1e20;

	for(float s = 0; s<len-bias;){
		float sdf = abs(ReadSDF(light_pos+dir*s));

		if(sdf < bias){
			float dl = sdf/max(0.001, dot(norm, -dir));
			return len-s-bias > dl ? 0 : shadow;
		}

		float y = sdf*sdf/(2.0*sdf_b);
        float d = sqrt(sdf*sdf-y*y);

		float w = (len-s) / s * radius;
		float wl = d * len / s;

		//shadow = min(shadow, wl/w);
		shadow = min( shadow, d/(radius*max(0.0,len-s-y)) );

		s += sdf;
		sdf_b = sdf;
	}
	return shadow;
}

void main(){

	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	//UpdateOF(uv);

	float alpha = imageLoad(U_alpha, uv).r;
		if(alpha < 0.5){
			imageStore(U_Lighting, uv, vec4(1));
			return;
	}

	vec3 pos = imageLoad(U_pos, uv).xyz;
	vec3 norm = imageLoad(U_normal, uv).xyz;
	float shadow = shadow_at(pos, norm);

	imageStore(U_Lighting, uv, vec4(vec3(shadow), 1));
}