#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba16f, binding = 3) uniform image2D U_pos;
layout(rg16f,   binding = 4) uniform image2D U_Lighting;
uniform samplerCube Shadow_Map;

uniform vec3 light_pos;
uniform float light_far;

float evaluateShadow(float c_depth, float min_depth){
	float bias = 0.015;
	float range = 0.005;
	float delta = c_depth - min_depth - bias;  // delta greater/equal than 0

	return 1-smoothstep(0, range, delta);
}

void main(){

	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	vec3 Pos = imageLoad(U_pos, uv).xyz;
	vec3 L = Pos - light_pos;
	float dist = length(L);

	float closestDepth = texture(Shadow_Map, normalize(L)).r; 
	float currentDepth = dist/light_far;
	float shadow = evaluateShadow(currentDepth, closestDepth);

	imageStore(U_Lighting, uv, vec4(vec3(shadow), 1));
}