#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba16f, binding = 0) uniform image2D U_combine;
layout(rgba8,	binding = 1) uniform image2D U_id;
layout(rgba16f, binding = 2) uniform image2D U_normal;
layout(rgba8,	binding = 3) uniform image2D U_alpha;

vec3 sample_near(ivec2 uv, vec2 dir){
	//return vec4(imageLoad(U_alpha, uv).r) * vec4(dir+0.5, 0, 1);
	//return vec4(dir-0.5, 0, 1);

	vec3 c00 = imageLoad(U_combine, uv+ivec2(0, 0)+ivec2(dir)).xyz;
	vec3 c10 = imageLoad(U_combine, uv+ivec2(1, 0)+ivec2(dir)).xyz;
	vec3 c01 = imageLoad(U_combine, uv+ivec2(0, 1)+ivec2(dir)).xyz;
	vec3 c11 = imageLoad(U_combine, uv+ivec2(1, 1)+ivec2(dir)).xyz;

	vec3 x0 = mix(c00, c10, fract(dir.x));
	vec3 x1 = mix(c01, c11, fract(dir.x));

	return mix(x0, x1, fract(dir.y));
}

int rad = 1;

float FXAA_SPAN_MAX =8.0;
float FXAA_REDUCE_MIN = 1.0/128.0;
float FXAA_REDUCE_MUL = 1.0/8.0;
vec3 luma = vec3(0.333,0.333,0.333);

vec2 IDDir(ivec2 uv){
	float lumaD = dot(luma, imageLoad(U_id, uv + ivec2( 0.0, 1.0)*rad).rgb);
	float lumaU = dot(luma, imageLoad(U_id, uv + ivec2( 0.0,-1.0)*rad).rgb);
	float lumaL = dot(luma, imageLoad(U_id, uv + ivec2(-1.0, 0.0)*rad).rgb);
	float lumaR = dot(luma, imageLoad(U_id, uv + ivec2( 1.0, 0.0)*rad).rgb);
	float lumaM = dot(luma, imageLoad(U_id, uv).rgb);

	vec2 dir; // [-1, -1] ~ [1, 1]
	dir.y = (lumaU - lumaD);
	dir.x = (lumaR - lumaL);
	//dir *= clamp(dot(vec4(0.25), vec4(lumaU, lumaD, lumaL, lumaR)) - lumaM, 0, 1);
	dir = clamp(dir, -1, 1) * imageLoad(U_alpha, uv).r;
	/*
	float dirReduce = min((lumaTL + lumaTR + lumaBL + lumaBR)*(FXAA_REDUCE_MUL * 0.25), FXAA_REDUCE_MIN);
	float inverseDirAdjustment = 1.0/(min(abs(dir.x), abs(dir.x) + dirReduce));
	dir = clamp(dir * inverseDirAdjustment, vec2(-FXAA_SPAN_MAX), vec2(FXAA_SPAN_MAX)) * uv;
	*/
	return dir;
}

vec2 NormalDir(ivec2 uv){
	vec3 lumaD = imageLoad(U_normal, uv + ivec2( 0.0, 1.0)*rad).rgb;
	vec3 lumaU = imageLoad(U_normal, uv + ivec2( 0.0,-1.0)*rad).rgb;
	vec3 lumaL = imageLoad(U_normal, uv + ivec2(-1.0, 0.0)*rad).rgb;
	vec3 lumaR = imageLoad(U_normal, uv + ivec2( 1.0, 0.0)*rad).rgb;
	vec3 lumaM = imageLoad(U_normal, uv).rgb;

	vec2 dir; // [-1, -1] ~ [1, 1]
	dir.y = length(lumaU - lumaD) * 0.5;
	dir.x = length(lumaR - lumaL) * 0.5;
	//dir *= clamp(dot(vec4(0.25), vec4(lumaU, lumaD, lumaL, lumaR)) - lumaM, 0, 1);
	dir = clamp(dir, -1, 1) * imageLoad(U_alpha, uv).r;
	/*
	float dirReduce = min((lumaTL + lumaTR + lumaBL + lumaBR)*(FXAA_REDUCE_MUL * 0.25), FXAA_REDUCE_MIN);
	float inverseDirAdjustment = 1.0/(min(abs(dir.x), abs(dir.x) + dirReduce));
	dir = clamp(dir * inverseDirAdjustment, vec2(-FXAA_SPAN_MAX), vec2(FXAA_SPAN_MAX)) * uv;
	*/
	return dir;
}

void main(){

	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	vec2 id_dir = IDDir(uv);
	vec2 normal_dir = NormalDir(uv);
	if(length(id_dir) <= 0.05 && length(normal_dir) <= 0.3){
		return;
	}

	if(length(id_dir) > 0.05){
		vec3 id_blur = sample_near(uv, normalize(id_dir)*0.5);
		imageStore(U_combine, uv, vec4(id_blur, 1));
	}

	memoryBarrier();
	//imageStore(U_combine, uv, vec4(normal_dir*0.5+0.5, 0, 1));
	if(length(normal_dir) > 0.3){
		vec3 nm_blur = sample_near(uv, normal_dir);
		imageStore(U_combine, uv, vec4(nm_blur, 1));
	}
}