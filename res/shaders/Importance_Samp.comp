#version 460 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;
layout(rgba16f, binding = 4) uniform image2D source;
layout(rgba16f, binding = 5) uniform image2D result;

const float pi = 3.1415926535;
uniform float s;
uniform int max_step;

vec2 genHdrUV(vec3 dir) {
	vec2 uv;
	uv.x = atan(dir.y, dir.x); 
	uv.y = asin(dir.z);
	return uv*vec2(0.15915494, 0.31830988)+0.5;
}

vec3 genDirFromRUV(vec2 uvf_r){
	return vec3(cos(uvf_r.y*pi/2)*cos(uvf_r.x*pi), cos(uvf_r.y*pi/2)*sin(uvf_r.x*pi), sin(uvf_r.y*pi/2));
}

vec3 genDirFromAngle(vec2 angle){
	return vec3(cos(angle.y)*cos(angle.x), cos(angle.y)*sin(angle.x), sin(angle.y));
}

vec2 AngleToRUV(vec2 angle){
	return 0.5*angle/vec2(pi, pi/2) +vec2(0.5);
}


float DistributionGGX(vec3 N, vec3 H, float a)
{
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom    = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom        = pi * denom * denom;
	
    return nom / denom;
}

vec3 h(vec3 a, vec3 b){
	return normalize(a + b);
}

void main(){

	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	vec2 uvf = (vec2(uv))/vec2(imageSize(result));

	if(s < 0.001){
		vec4 ori_color = imageLoad(source, uv);
		imageStore(result, uv, ori_color);
		return;
	}

	vec2 uvf_r = uvf*2-vec2(1.0);
	vec4 color2 = vec4(0);// = imageLoad(source, ivec2(genHdrUV(dir)*imageSize(source)))

	vec2 angle = vec2(uvf_r.x*pi, uvf_r.y*pi/2);
	float factor = 0;

	vec3 dir_f = genDirFromAngle(angle);
	vec3 dir_u = genDirFromAngle(angle-vec2(0, pi/2));
	vec3 dir_l = cross(dir_f, dir_u);

	for(int i = -max_step; i<=max_step; i++){
		int j_m = max_step-abs(i);
		for(int j = -j_m; j<=j_m; j++){
			float a = s*float(i)/max_step;
			float b = s*float(j)/max_step;
			float c = 1 - abs(a) - abs(b);

			vec3 dir = normalize(a*dir_u + b*dir_l + c*dir_f);
			float coef = c/length(vec3(a,b,c));

			color2 += imageLoad(source, ivec2(genHdrUV(dir)*imageSize(source))) * coef;
			factor += coef;
		}
	
	}

	color2 /= factor;
	//color2 = vec4(vec3(uvf_r.x), 1);
	//color2 = vec4(vec3(uvf.x), 1);
	imageStore(result, uv, color2);
	//imageStore(result, uv, vec4(fract(5*uvf),1,1));
}