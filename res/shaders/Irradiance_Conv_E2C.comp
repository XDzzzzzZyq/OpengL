#version 460 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;
layout(rgba16f, binding = 5) uniform imageCube target;
uniform sampler2D source;

const float pi = 3.1415926535;
uniform int max_step;

vec2 genHdrUV(vec3 dir) {
	vec2 uv;
	uv.x = atan(dir.y, dir.x); 
	uv.y = asin(dir.z);
	return uv*vec2(0.15915494, 0.31830988)+0.5;
}

vec3 genDirFromRUV(vec2 uvf_r){
	return vec3(cos(uvf_r.y*pi/2)*cos(uvf_r.x*pi), cos(uvf_r.y*pi/2)*sin(uvf_r.x*pi), sin(uvf_r.y*pi/2));
}

vec3 genDirFromAngle(vec2 angle){
	return vec3(cos(angle.y)*cos(angle.x), cos(angle.y)*sin(angle.x), sin(angle.y));
}

vec2 AngleToRUV(vec2 angle){
	return 0.5*angle/vec2(pi, pi/2) +vec2(0.5);
}
vec3 GetDir(ivec3 loc){

	vec2 uv = (loc.xy + 0.5)/imageSize(target).x;

    vec3 dir = normalize(vec3(1, (uv-0.5)*2));
    vec3 X = vec3(1, 0, 0);
    vec3 Y = vec3(0, 1, 0);
    vec3 Z = vec3(0, 0, 1);
    /**/
    switch(int(loc.z)){
    case 0:
        dir = mat3(Y, -Z, -X) * dir;
        break;
    case 1:
        dir = mat3(-Y, Z, -X) * dir;
        break;
    case 2:
        dir = mat3(X, Y, Z) * dir;
        break;
    case 3:
        dir = mat3(-X, Y, -Z) * dir;
        break;
    case 4:
        dir = mat3(Z, Y, -X) * dir;
        break;
    case 5:
        dir = mat3(-Z, -Y, -X) * dir;
        break;
    }

    return mat3(Y, -X, Z) * dir;
}


void main(){

	ivec3 uv = ivec3(gl_GlobalInvocationID.xyz);
	vec2 uvf = vec2(uv)/vec2(imageSize(target));

	vec2 uvf_r = uvf*2-vec2(1.0);
	vec4 color2 = vec4(0);// = imageLoad(source, ivec2(genHdrUV(dir)*imageSize(source)))

	vec2 angle = vec2(uvf_r.x*pi, uvf_r.y*pi/2);
	float factor = 0;

	vec3 dir_f = GetDir(uv);
	vec3 dir_u = normalize(cross(dir_f, dir_f+1));
	vec3 dir_l = cross(dir_f, dir_u);

	for(int i = -max_step; i<=max_step; i++){
		int j_m = max_step-abs(i);
		for(int j = -j_m; j<=j_m; j++){
			float a = float(i)/max_step;
			float b = float(j)/max_step;
			float c = 1 - abs(a) - abs(b);

			vec3 dir = normalize(a*dir_u + b*dir_l + c*dir_f);
			float coef = c/length(vec3(a,b,c));

			color2 += texture(source, genHdrUV(dir));
			factor += 1;
		}
	
	}

	color2 /= factor;
	//color2 = vec4(vec3(uvf_r.x), 1);
	//color2 = vec4(vec3(uvf.x), 1);
	imageStore(target, uv, color2);
	//imageStore(result, uv, vec4(fract(5*uvf),1,1));
}